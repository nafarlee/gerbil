prelude: :<root>
package: gerbil/core
namespace: gerbil/core/contract

(%#begin (%#import
          :gerbil/core/module-sugar
          (phi: 1 :gerbil/core/module-sugar))
         (%#import
          :gerbil/core/runtime
          :gerbil/core/sugar
          (spec:
           (:gerbil/core/mop)
           (0 MOP-2 0 MOP-2)
           (0 MOP-3 0 MOP-3)
           (0 MOP-5 0 MOP-5)
           (0 MOP-4 0 MOP-4)
           (0 MOP-1 0 MOP-1)
           (0 defstruct-type 0 defstruct-type)
           (0 defclass-type 0 defclass-type)
           (1 module-type-id 1 module-type-id)
           (1 make-class-type-id 1 make-class-type-id)
           (0 define-class 0 define-class)
           (0 define-struct 0 define-struct)
           (0 @ 0 @)
           (0 defclass 0 defclass)
           (0 defstruct 0 defstruct)
           (0 defmethod 0 defmethod)
           (0 @-set! 0 @-set!)
           (0 :udp-port 0 :udp-port)
           (0 :u8vector-port 0 :u8vector-port)
           (0 :device-port 0 :device-port)
           (0 :s8vector 0 :s8vector)
           (0 :thread 0 :thread)
           (0 :byte-port 0 :byte-port)
           (0 :symbolic 0 :symbolic)
           (0 :list 0 :list)
           (0 :ratnum 0 :ratnum)
           (0 :values 0 :values)
           (0 :s32vector 0 :s32vector)
           (0 :mutex 0 :mutex)
           (0 :real 0 :real)
           (0 :tcp-server-port 0 :tcp-server-port)
           (0 :hvector 0 :hvector)
           (0 :true 0 :true)
           (0 :continuation 0 :continuation)
           (0 :keyword 0 :keyword)
           (0 :number 0 :number)
           (0 :char 0 :char)
           (0 :u64vector 0 :u64vector)
           (0 :string-port 0 :string-port)
           (0 defsystem-class-info 0 defsystem-class-info)
           (0 :string 0 :string)
           (0 :u8vector 0 :u8vector)
           (0 :bignum 0 :bignum)
           (0 :t 0 :t)
           (0 :atom 0 :atom)
           (0 :time 0 :time)
           (0 :thread-group 0 :thread-group)
           (0 :s16vector 0 :s16vector)
           (0 :object 0 :object)
           (0 :class 0 :class)
           (0 :file-info 0 :file-info)
           (0 :character-port 0 :character-port)
           (0 :integer 0 :integer)
           (0 :u32vector 0 :u32vector)
           (0 :eof 0 :eof)
           (0 :readenv 0 :readenv)
           (0 :s64vector 0 :s64vector)
           (0 :flonum 0 :flonum)
           (0 :foreign 0 :foreign)
           (0 :weak 0 :weak)
           (0 :vector 0 :vector)
           (0 :boolean 0 :boolean)
           (0 :cpxnum 0 :cpxnum)
           (0 :immediate 0 :immediate)
           (0 :event-queue-port 0 :event-queue-port)
           (0 :directory-port 0 :directory-port)
           (0 class 0 class)
           (0 :void 0 :void)
           (0 :f64vector 0 :f64vector)
           (0 :processor 0 :processor)
           (0 :fixnum 0 :fixnum)
           (0 :socket-info 0 :socket-info)
           (0 :table 0 :table)
           (0 :f32vector 0 :f32vector)
           (0 :special 0 :special)
           (0 :null 0 :null)
           (0 :raw-device-port 0 :raw-device-port)
           (0 :frame 0 :frame)
           (0 :pair 0 :pair)
           (0 :sequence 0 :sequence)
           (0 :box 0 :box)
           (0 :symbol 0 :symbol)
           (0 :address-info 0 :address-info)
           (0 :vm 0 :vm)
           (0 :condvar 0 :condvar)
           (0 :promise 0 :promise)
           (0 :port 0 :port)
           (0 :procedure 0 :procedure)
           (0 :readtable 0 :readtable)
           (0 :vector-port 0 :vector-port)
           (0 :object-port 0 :object-port)
           (0 :writeenv 0 :writeenv)
           (0 :false 0 :false)
           (0 :u16vector 0 :u16vector)
           (1 defstruct-type 1 defstruct-type)
           (1 defclass-type 1 defclass-type)
           (2 module-type-id 2 module-type-id)
           (2 make-class-type-id 2 make-class-type-id)
           (1 !class-type-id-set! 1 !class-type-id-set!)
           (1 !class-type-slot-types 1 !class-type-slot-types)
           (1
            class-type-info::apply-macro-expander
            1
            class-type-info::apply-macro-expander)
           (1
            !class-type-unchecked-mutators-set!
            1
            !class-type-unchecked-mutators-set!)
           (1
            &!class-type-slot-contracts-set!
            1
            &!class-type-slot-contracts-set!)
           (1 &!class-type-mutators-set! 1 &!class-type-mutators-set!)
           (1 &!class-type-accessors-set! 1 &!class-type-accessors-set!)
           (1 &!class-type-struct?-set! 1 &!class-type-struct?-set!)
           (1
            &!class-type-ordered-slots-set!
            1
            &!class-type-ordered-slots-set!)
           (1 !class-type-name 1 !class-type-name)
           (1 !class-type-mutators 1 !class-type-mutators)
           (1 &!class-type-descriptor 1 &!class-type-descriptor)
           (1 !class-type-metaclass 1 !class-type-metaclass)
           (1 !class-type-system? 1 !class-type-system?)
           (1 &!class-type-name-set! 1 &!class-type-name-set!)
           (1 class-type-info::t 1 class-type-info::t)
           (1 &!class-type-mutators 1 &!class-type-mutators)
           (1 &!class-type-system? 1 &!class-type-system?)
           (1 &!class-type-ordered-slots 1 &!class-type-ordered-slots)
           (1 !class-type-final? 1 !class-type-final?)
           (1 !class-type-system?-set! 1 !class-type-system?-set!)
           (1 !class-type-ordered-slots-set! 1 !class-type-ordered-slots-set!)
           (1 !class-type-slot-defaults 1 !class-type-slot-defaults)
           (1 !class-type-constructor-method 1 !class-type-constructor-method)
           (1 &!class-type-constructor 1 &!class-type-constructor)
           (1 !class-type-descriptor 1 !class-type-descriptor)
           (1 &!class-type-descriptor-set! 1 &!class-type-descriptor-set!)
           (1 !class-type-constructor 1 !class-type-constructor)
           (1 &!class-type-precedence-list 1 &!class-type-precedence-list)
           (1
            &!class-type-constructor-method-set!
            1
            &!class-type-constructor-method-set!)
           (1 !class-type-predicate-set! 1 !class-type-predicate-set!)
           (1 &!class-type-slot-contracts 1 &!class-type-slot-contracts)
           (1 !class-type-constructor-set! 1 !class-type-constructor-set!)
           (1 make-class-type-info 1 make-class-type-info)
           (1 class-type-info? 1 class-type-info?)
           (1 &!class-type-final? 1 &!class-type-final?)
           (1 !class-type-descriptor-set! 1 !class-type-descriptor-set!)
           (1
            !class-type-unchecked-accessors
            1
            !class-type-unchecked-accessors)
           (1
            !class-type-precedence-list-set!
            1
            !class-type-precedence-list-set!)
           (1 !class-type-unchecked-mutators 1 !class-type-unchecked-mutators)
           (1 !class-type-predicate 1 !class-type-predicate)
           (1 &!class-type-super-set! 1 &!class-type-super-set!)
           (1
            &!class-type-unchecked-accessors
            1
            &!class-type-unchecked-accessors)
           (1 &!class-type-metaclass 1 &!class-type-metaclass)
           (1 !class-type-slot-defaults-set! 1 !class-type-slot-defaults-set!)
           (1 !class-type-slot-types-set! 1 !class-type-slot-types-set!)
           (1
            !class-type-constructor-method-set!
            1
            !class-type-constructor-method-set!)
           (1 !class-type-metaclass-set! 1 !class-type-metaclass-set!)
           (1 !class-type-final?-set! 1 !class-type-final?-set!)
           (1 !class-type-slots-set! 1 !class-type-slots-set!)
           (1 !class-type-slot-contracts 1 !class-type-slot-contracts)
           (1
            &!class-type-unchecked-mutators
            1
            &!class-type-unchecked-mutators)
           (1 !class-type-precedence-list 1 !class-type-precedence-list)
           (1 &!class-type-predicate-set! 1 &!class-type-predicate-set!)
           (1 &!class-type-accessors 1 &!class-type-accessors)
           (1 &!class-type-slots 1 &!class-type-slots)
           (1 !class-type-slots 1 !class-type-slots)
           (1
            &!class-type-precedence-list-set!
            1
            &!class-type-precedence-list-set!)
           (1 !class-type-accessors-set! 1 !class-type-accessors-set!)
           (1 !class-type-super 1 !class-type-super)
           (1
            &!class-type-unchecked-mutators-set!
            1
            &!class-type-unchecked-mutators-set!)
           (1 !class-type-accessors 1 !class-type-accessors)
           (1 &!class-type-struct? 1 &!class-type-struct?)
           (1 !class-type-ordered-slots 1 !class-type-ordered-slots)
           (1 &!class-type-constructor-set! 1 &!class-type-constructor-set!)
           (1
            &!class-type-constructor-method
            1
            &!class-type-constructor-method)
           (1 !class-type-name-set! 1 !class-type-name-set!)
           (1 &!class-type-predicate 1 &!class-type-predicate)
           (1 &!class-type-id-set! 1 &!class-type-id-set!)
           (1 &!class-type-super 1 &!class-type-super)
           (1 !class-type-id 1 !class-type-id)
           (1
            &!class-type-unchecked-accessors-set!
            1
            &!class-type-unchecked-accessors-set!)
           (1 &!class-type-slots-set! 1 &!class-type-slots-set!)
           (1 &!class-type-final?-set! 1 &!class-type-final?-set!)
           (1 syntax-local-class-type-info? 1 syntax-local-class-type-info?)
           (1 &!class-type-system?-set! 1 &!class-type-system?-set!)
           (1 &!class-type-id 1 &!class-type-id)
           (1
            &!class-type-slot-defaults-set!
            1
            &!class-type-slot-defaults-set!)
           (1 &!class-type-slot-types-set! 1 &!class-type-slot-types-set!)
           (1 !class-type-struct? 1 !class-type-struct?)
           (1 &!class-type-slot-defaults 1 &!class-type-slot-defaults)
           (1 &!class-type-metaclass-set! 1 &!class-type-metaclass-set!)
           (1 &!class-type-slot-types 1 &!class-type-slot-types)
           (1 &!class-type-name 1 &!class-type-name)
           (1
            !class-type-slot-contracts-set!
            1
            !class-type-slot-contracts-set!)
           (1
            !class-type-unchecked-accessors-set!
            1
            !class-type-unchecked-accessors-set!)
           (1 !class-type-mutators-set! 1 !class-type-mutators-set!)
           (1 !class-type-struct?-set! 1 !class-type-struct?-set!)
           (1 !class-type-super-set! 1 !class-type-super-set!)
           (1 class-type-info 1 class-type-info)
           (1 define-class 1 define-class)
           (1 define-struct 1 define-struct)
           (1 @ 1 @)
           (1 defclass 1 defclass)
           (1 defstruct 1 defstruct)
           (1 defmethod 1 defmethod)
           (1 @-set! 1 @-set!)
           (1 :udp-port 1 :udp-port)
           (1 :u8vector-port 1 :u8vector-port)
           (1 :device-port 1 :device-port)
           (1 :s8vector 1 :s8vector)
           (1 :thread 1 :thread)
           (1 :byte-port 1 :byte-port)
           (1 :symbolic 1 :symbolic)
           (1 :list 1 :list)
           (1 :ratnum 1 :ratnum)
           (1 :values 1 :values)
           (1 :s32vector 1 :s32vector)
           (1 :mutex 1 :mutex)
           (1 :real 1 :real)
           (1 :tcp-server-port 1 :tcp-server-port)
           (1 :hvector 1 :hvector)
           (1 :true 1 :true)
           (1 :continuation 1 :continuation)
           (1 :keyword 1 :keyword)
           (1 :number 1 :number)
           (1 :char 1 :char)
           (1 :u64vector 1 :u64vector)
           (1 :string-port 1 :string-port)
           (1 defsystem-class-info 1 defsystem-class-info)
           (1 :string 1 :string)
           (1 :u8vector 1 :u8vector)
           (1 :bignum 1 :bignum)
           (1 :t 1 :t)
           (1 :atom 1 :atom)
           (1 :time 1 :time)
           (1 :thread-group 1 :thread-group)
           (1 :s16vector 1 :s16vector)
           (1 :object 1 :object)
           (1 :class 1 :class)
           (1 :file-info 1 :file-info)
           (1 :character-port 1 :character-port)
           (1 :integer 1 :integer)
           (1 :u32vector 1 :u32vector)
           (1 :eof 1 :eof)
           (1 :readenv 1 :readenv)
           (1 :s64vector 1 :s64vector)
           (1 :flonum 1 :flonum)
           (1 :foreign 1 :foreign)
           (1 :weak 1 :weak)
           (1 :vector 1 :vector)
           (1 :boolean 1 :boolean)
           (1 :cpxnum 1 :cpxnum)
           (1 :immediate 1 :immediate)
           (1 :event-queue-port 1 :event-queue-port)
           (1 :directory-port 1 :directory-port)
           (1 class 1 class)
           (1 :void 1 :void)
           (1 :f64vector 1 :f64vector)
           (1 :processor 1 :processor)
           (1 :fixnum 1 :fixnum)
           (1 :socket-info 1 :socket-info)
           (1 :table 1 :table)
           (1 :f32vector 1 :f32vector)
           (1 :special 1 :special)
           (1 :null 1 :null)
           (1 :raw-device-port 1 :raw-device-port)
           (1 :frame 1 :frame)
           (1 :pair 1 :pair)
           (1 :sequence 1 :sequence)
           (1 :box 1 :box)
           (1 :symbol 1 :symbol)
           (1 :address-info 1 :address-info)
           (1 :vm 1 :vm)
           (1 :condvar 1 :condvar)
           (1 :promise 1 :promise)
           (1 :port 1 :port)
           (1 :procedure 1 :procedure)
           (1 :readtable 1 :readtable)
           (1 :vector-port 1 :vector-port)
           (1 :object-port 1 :object-port)
           (1 :writeenv 1 :writeenv)
           (1 :false 1 :false)
           (1 :u16vector 1 :u16vector))
          :gerbil/core/match
          :gerbil/core/more-sugar
          (phi: 1 :gerbil/core/runtime)
          (phi: 1 :gerbil/core/sugar)
          (spec:
           (:gerbil/core/mop)
           (1 MOP-2 0 MOP-2)
           (1 MOP-3 0 MOP-3)
           (1 MOP-5 0 MOP-5)
           (1 MOP-4 0 MOP-4)
           (1 MOP-1 0 MOP-1)
           (1 defstruct-type 0 defstruct-type)
           (1 defclass-type 0 defclass-type)
           (2 module-type-id 1 module-type-id)
           (2 make-class-type-id 1 make-class-type-id)
           (1 define-class 0 define-class)
           (1 define-struct 0 define-struct)
           (1 @ 0 @)
           (1 defclass 0 defclass)
           (1 defstruct 0 defstruct)
           (1 defmethod 0 defmethod)
           (1 @-set! 0 @-set!)
           (1 :udp-port 0 :udp-port)
           (1 :u8vector-port 0 :u8vector-port)
           (1 :device-port 0 :device-port)
           (1 :s8vector 0 :s8vector)
           (1 :thread 0 :thread)
           (1 :byte-port 0 :byte-port)
           (1 :symbolic 0 :symbolic)
           (1 :list 0 :list)
           (1 :ratnum 0 :ratnum)
           (1 :values 0 :values)
           (1 :s32vector 0 :s32vector)
           (1 :mutex 0 :mutex)
           (1 :real 0 :real)
           (1 :tcp-server-port 0 :tcp-server-port)
           (1 :hvector 0 :hvector)
           (1 :true 0 :true)
           (1 :continuation 0 :continuation)
           (1 :keyword 0 :keyword)
           (1 :number 0 :number)
           (1 :char 0 :char)
           (1 :u64vector 0 :u64vector)
           (1 :string-port 0 :string-port)
           (1 defsystem-class-info 0 defsystem-class-info)
           (1 :string 0 :string)
           (1 :u8vector 0 :u8vector)
           (1 :bignum 0 :bignum)
           (1 :t 0 :t)
           (1 :atom 0 :atom)
           (1 :time 0 :time)
           (1 :thread-group 0 :thread-group)
           (1 :s16vector 0 :s16vector)
           (1 :object 0 :object)
           (1 :class 0 :class)
           (1 :file-info 0 :file-info)
           (1 :character-port 0 :character-port)
           (1 :integer 0 :integer)
           (1 :u32vector 0 :u32vector)
           (1 :eof 0 :eof)
           (1 :readenv 0 :readenv)
           (1 :s64vector 0 :s64vector)
           (1 :flonum 0 :flonum)
           (1 :foreign 0 :foreign)
           (1 :weak 0 :weak)
           (1 :vector 0 :vector)
           (1 :boolean 0 :boolean)
           (1 :cpxnum 0 :cpxnum)
           (1 :immediate 0 :immediate)
           (1 :event-queue-port 0 :event-queue-port)
           (1 :directory-port 0 :directory-port)
           (1 class 0 class)
           (1 :void 0 :void)
           (1 :f64vector 0 :f64vector)
           (1 :processor 0 :processor)
           (1 :fixnum 0 :fixnum)
           (1 :socket-info 0 :socket-info)
           (1 :table 0 :table)
           (1 :f32vector 0 :f32vector)
           (1 :special 0 :special)
           (1 :null 0 :null)
           (1 :raw-device-port 0 :raw-device-port)
           (1 :frame 0 :frame)
           (1 :pair 0 :pair)
           (1 :sequence 0 :sequence)
           (1 :box 0 :box)
           (1 :symbol 0 :symbol)
           (1 :address-info 0 :address-info)
           (1 :vm 0 :vm)
           (1 :condvar 0 :condvar)
           (1 :promise 0 :promise)
           (1 :port 0 :port)
           (1 :procedure 0 :procedure)
           (1 :readtable 0 :readtable)
           (1 :vector-port 0 :vector-port)
           (1 :object-port 0 :object-port)
           (1 :writeenv 0 :writeenv)
           (1 :false 0 :false)
           (1 :u16vector 0 :u16vector)
           (2 defstruct-type 1 defstruct-type)
           (2 defclass-type 1 defclass-type)
           (3 module-type-id 2 module-type-id)
           (3 make-class-type-id 2 make-class-type-id)
           (2 !class-type-id-set! 1 !class-type-id-set!)
           (2 !class-type-slot-types 1 !class-type-slot-types)
           (2
            class-type-info::apply-macro-expander
            1
            class-type-info::apply-macro-expander)
           (2
            !class-type-unchecked-mutators-set!
            1
            !class-type-unchecked-mutators-set!)
           (2
            &!class-type-slot-contracts-set!
            1
            &!class-type-slot-contracts-set!)
           (2 &!class-type-mutators-set! 1 &!class-type-mutators-set!)
           (2 &!class-type-accessors-set! 1 &!class-type-accessors-set!)
           (2 &!class-type-struct?-set! 1 &!class-type-struct?-set!)
           (2
            &!class-type-ordered-slots-set!
            1
            &!class-type-ordered-slots-set!)
           (2 !class-type-name 1 !class-type-name)
           (2 !class-type-mutators 1 !class-type-mutators)
           (2 &!class-type-descriptor 1 &!class-type-descriptor)
           (2 !class-type-metaclass 1 !class-type-metaclass)
           (2 !class-type-system? 1 !class-type-system?)
           (2 &!class-type-name-set! 1 &!class-type-name-set!)
           (2 class-type-info::t 1 class-type-info::t)
           (2 &!class-type-mutators 1 &!class-type-mutators)
           (2 &!class-type-system? 1 &!class-type-system?)
           (2 &!class-type-ordered-slots 1 &!class-type-ordered-slots)
           (2 !class-type-final? 1 !class-type-final?)
           (2 !class-type-system?-set! 1 !class-type-system?-set!)
           (2 !class-type-ordered-slots-set! 1 !class-type-ordered-slots-set!)
           (2 !class-type-slot-defaults 1 !class-type-slot-defaults)
           (2 !class-type-constructor-method 1 !class-type-constructor-method)
           (2 &!class-type-constructor 1 &!class-type-constructor)
           (2 !class-type-descriptor 1 !class-type-descriptor)
           (2 &!class-type-descriptor-set! 1 &!class-type-descriptor-set!)
           (2 !class-type-constructor 1 !class-type-constructor)
           (2 &!class-type-precedence-list 1 &!class-type-precedence-list)
           (2
            &!class-type-constructor-method-set!
            1
            &!class-type-constructor-method-set!)
           (2 !class-type-predicate-set! 1 !class-type-predicate-set!)
           (2 &!class-type-slot-contracts 1 &!class-type-slot-contracts)
           (2 !class-type-constructor-set! 1 !class-type-constructor-set!)
           (2 make-class-type-info 1 make-class-type-info)
           (2 class-type-info? 1 class-type-info?)
           (2 &!class-type-final? 1 &!class-type-final?)
           (2 !class-type-descriptor-set! 1 !class-type-descriptor-set!)
           (2
            !class-type-unchecked-accessors
            1
            !class-type-unchecked-accessors)
           (2
            !class-type-precedence-list-set!
            1
            !class-type-precedence-list-set!)
           (2 !class-type-unchecked-mutators 1 !class-type-unchecked-mutators)
           (2 !class-type-predicate 1 !class-type-predicate)
           (2 &!class-type-super-set! 1 &!class-type-super-set!)
           (2
            &!class-type-unchecked-accessors
            1
            &!class-type-unchecked-accessors)
           (2 &!class-type-metaclass 1 &!class-type-metaclass)
           (2 !class-type-slot-defaults-set! 1 !class-type-slot-defaults-set!)
           (2 !class-type-slot-types-set! 1 !class-type-slot-types-set!)
           (2
            !class-type-constructor-method-set!
            1
            !class-type-constructor-method-set!)
           (2 !class-type-metaclass-set! 1 !class-type-metaclass-set!)
           (2 !class-type-final?-set! 1 !class-type-final?-set!)
           (2 !class-type-slots-set! 1 !class-type-slots-set!)
           (2 !class-type-slot-contracts 1 !class-type-slot-contracts)
           (2
            &!class-type-unchecked-mutators
            1
            &!class-type-unchecked-mutators)
           (2 !class-type-precedence-list 1 !class-type-precedence-list)
           (2 &!class-type-predicate-set! 1 &!class-type-predicate-set!)
           (2 &!class-type-accessors 1 &!class-type-accessors)
           (2 &!class-type-slots 1 &!class-type-slots)
           (2 !class-type-slots 1 !class-type-slots)
           (2
            &!class-type-precedence-list-set!
            1
            &!class-type-precedence-list-set!)
           (2 !class-type-accessors-set! 1 !class-type-accessors-set!)
           (2 !class-type-super 1 !class-type-super)
           (2
            &!class-type-unchecked-mutators-set!
            1
            &!class-type-unchecked-mutators-set!)
           (2 !class-type-accessors 1 !class-type-accessors)
           (2 &!class-type-struct? 1 &!class-type-struct?)
           (2 !class-type-ordered-slots 1 !class-type-ordered-slots)
           (2 &!class-type-constructor-set! 1 &!class-type-constructor-set!)
           (2
            &!class-type-constructor-method
            1
            &!class-type-constructor-method)
           (2 !class-type-name-set! 1 !class-type-name-set!)
           (2 &!class-type-predicate 1 &!class-type-predicate)
           (2 &!class-type-id-set! 1 &!class-type-id-set!)
           (2 &!class-type-super 1 &!class-type-super)
           (2 !class-type-id 1 !class-type-id)
           (2
            &!class-type-unchecked-accessors-set!
            1
            &!class-type-unchecked-accessors-set!)
           (2 &!class-type-slots-set! 1 &!class-type-slots-set!)
           (2 &!class-type-final?-set! 1 &!class-type-final?-set!)
           (2 syntax-local-class-type-info? 1 syntax-local-class-type-info?)
           (2 &!class-type-system?-set! 1 &!class-type-system?-set!)
           (2 &!class-type-id 1 &!class-type-id)
           (2
            &!class-type-slot-defaults-set!
            1
            &!class-type-slot-defaults-set!)
           (2 &!class-type-slot-types-set! 1 &!class-type-slot-types-set!)
           (2 !class-type-struct? 1 !class-type-struct?)
           (2 &!class-type-slot-defaults 1 &!class-type-slot-defaults)
           (2 &!class-type-metaclass-set! 1 &!class-type-metaclass-set!)
           (2 &!class-type-slot-types 1 &!class-type-slot-types)
           (2 &!class-type-name 1 &!class-type-name)
           (2
            !class-type-slot-contracts-set!
            1
            !class-type-slot-contracts-set!)
           (2
            !class-type-unchecked-accessors-set!
            1
            !class-type-unchecked-accessors-set!)
           (2 !class-type-mutators-set! 1 !class-type-mutators-set!)
           (2 !class-type-struct?-set! 1 !class-type-struct?-set!)
           (2 !class-type-super-set! 1 !class-type-super-set!)
           (2 class-type-info 1 class-type-info)
           (2 define-class 1 define-class)
           (2 define-struct 1 define-struct)
           (2 @ 1 @)
           (2 defclass 1 defclass)
           (2 defstruct 1 defstruct)
           (2 defmethod 1 defmethod)
           (2 @-set! 1 @-set!)
           (2 :udp-port 1 :udp-port)
           (2 :u8vector-port 1 :u8vector-port)
           (2 :device-port 1 :device-port)
           (2 :s8vector 1 :s8vector)
           (2 :thread 1 :thread)
           (2 :byte-port 1 :byte-port)
           (2 :symbolic 1 :symbolic)
           (2 :list 1 :list)
           (2 :ratnum 1 :ratnum)
           (2 :values 1 :values)
           (2 :s32vector 1 :s32vector)
           (2 :mutex 1 :mutex)
           (2 :real 1 :real)
           (2 :tcp-server-port 1 :tcp-server-port)
           (2 :hvector 1 :hvector)
           (2 :true 1 :true)
           (2 :continuation 1 :continuation)
           (2 :keyword 1 :keyword)
           (2 :number 1 :number)
           (2 :char 1 :char)
           (2 :u64vector 1 :u64vector)
           (2 :string-port 1 :string-port)
           (2 defsystem-class-info 1 defsystem-class-info)
           (2 :string 1 :string)
           (2 :u8vector 1 :u8vector)
           (2 :bignum 1 :bignum)
           (2 :t 1 :t)
           (2 :atom 1 :atom)
           (2 :time 1 :time)
           (2 :thread-group 1 :thread-group)
           (2 :s16vector 1 :s16vector)
           (2 :object 1 :object)
           (2 :class 1 :class)
           (2 :file-info 1 :file-info)
           (2 :character-port 1 :character-port)
           (2 :integer 1 :integer)
           (2 :u32vector 1 :u32vector)
           (2 :eof 1 :eof)
           (2 :readenv 1 :readenv)
           (2 :s64vector 1 :s64vector)
           (2 :flonum 1 :flonum)
           (2 :foreign 1 :foreign)
           (2 :weak 1 :weak)
           (2 :vector 1 :vector)
           (2 :boolean 1 :boolean)
           (2 :cpxnum 1 :cpxnum)
           (2 :immediate 1 :immediate)
           (2 :event-queue-port 1 :event-queue-port)
           (2 :directory-port 1 :directory-port)
           (2 class 1 class)
           (2 :void 1 :void)
           (2 :f64vector 1 :f64vector)
           (2 :processor 1 :processor)
           (2 :fixnum 1 :fixnum)
           (2 :socket-info 1 :socket-info)
           (2 :table 1 :table)
           (2 :f32vector 1 :f32vector)
           (2 :special 1 :special)
           (2 :null 1 :null)
           (2 :raw-device-port 1 :raw-device-port)
           (2 :frame 1 :frame)
           (2 :pair 1 :pair)
           (2 :sequence 1 :sequence)
           (2 :box 1 :box)
           (2 :symbol 1 :symbol)
           (2 :address-info 1 :address-info)
           (2 :vm 1 :vm)
           (2 :condvar 1 :condvar)
           (2 :promise 1 :promise)
           (2 :port 1 :port)
           (2 :procedure 1 :procedure)
           (2 :readtable 1 :readtable)
           (2 :vector-port 1 :vector-port)
           (2 :object-port 1 :object-port)
           (2 :writeenv 1 :writeenv)
           (2 :false 1 :false)
           (2 :u16vector 1 :u16vector))
          (phi: 1 :gerbil/core/match)
          (phi: 1 :gerbil/core/more-sugar)
          (phi: 1 :gerbil/core/expander)
          (phi: 1 :gerbil/core/macro-object)
          (phi: 1 :gerbil/core/more-syntax-sugar)
          (phi: 2 :gerbil/core/runtime)
          (phi: 2 :gerbil/core/expander))
         (%#export
          #t
          (import: (in: #f TypeReference))
          (import: (in: #f TypeCast))
          (import: (in: #f Using))
          (import: (in: #f ContractRules))
          (import: (in: #f Interface))
          (import: (in: #f TypedDefinitions))
          (phi: 1 (import: (in: #f InterfaceInfo)))
          (phi: 1 (import: (in: #f TypeEnv)))
          (phi: 1 (import: (in: #f ClassMeta))))
         (%#module
          InterfaceInfo
          (%#begin (%#import
                    :gerbil/core/expander
                    (spec:
                     (:gerbil/core/mop)
                     (0 @method 0 @method)
                     (1 @method 1 @method)))
                   (%#export #t)
                   (%#define-runtime
                    interface-info::t
                    gerbil/core/contract~InterfaceInfo#interface-info::t)
                   (%#define-runtime
                    interface-info?
                    gerbil/core/contract~InterfaceInfo#interface-info?)
                   (%#define-runtime
                    make-interface-info
                    gerbil/core/contract~InterfaceInfo#make-interface-info)
                   (%#define-runtime
                    interface-info-name
                    gerbil/core/contract~InterfaceInfo#interface-info-name)
                   (%#define-runtime
                    interface-info-namespace
                    gerbil/core/contract~InterfaceInfo#interface-info-namespace)
                   (%#define-runtime
                    interface-info-interface-mixin
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-mixin)
                   (%#define-runtime
                    interface-info-interface-methods
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-methods)
                   (%#define-runtime
                    interface-info-interface-precedence-list
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-precedence-list)
                   (%#define-runtime
                    interface-info-interface-descriptor
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-descriptor)
                   (%#define-runtime
                    interface-info-instance-type
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-type)
                   (%#define-runtime
                    interface-info-instance-constructor
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-constructor)
                   (%#define-runtime
                    interface-info-instance-try-constructor
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-try-constructor)
                   (%#define-runtime
                    interface-info-instance-predicate
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-predicate)
                   (%#define-runtime
                    interface-info-instance-satisfies-predicate
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-satisfies-predicate)
                   (%#define-runtime
                    interface-info-implementation-methods
                    gerbil/core/contract~InterfaceInfo#interface-info-implementation-methods)
                   (%#define-runtime
                    interface-info-unchecked-implementation-methods
                    gerbil/core/contract~InterfaceInfo#interface-info-unchecked-implementation-methods)
                   (%#define-runtime
                    interface-info-name-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-name-set!)
                   (%#define-runtime
                    interface-info-namespace-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-namespace-set!)
                   (%#define-runtime
                    interface-info-interface-mixin-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-mixin-set!)
                   (%#define-runtime
                    interface-info-interface-methods-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-methods-set!)
                   (%#define-runtime
                    interface-info-interface-precedence-list-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-precedence-list-set!)
                   (%#define-runtime
                    interface-info-interface-descriptor-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-interface-descriptor-set!)
                   (%#define-runtime
                    interface-info-instance-type-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-type-set!)
                   (%#define-runtime
                    interface-info-instance-constructor-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-constructor-set!)
                   (%#define-runtime
                    interface-info-instance-try-constructor-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-try-constructor-set!)
                   (%#define-runtime
                    interface-info-instance-predicate-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-predicate-set!)
                   (%#define-runtime
                    interface-info-instance-satisfies-predicate-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-instance-satisfies-predicate-set!)
                   (%#define-runtime
                    interface-info-implementation-methods-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-implementation-methods-set!)
                   (%#define-runtime
                    interface-info-unchecked-implementation-methods-set!
                    gerbil/core/contract~InterfaceInfo#interface-info-unchecked-implementation-methods-set!)
                   (%#define-runtime
                    &interface-info-name
                    gerbil/core/contract~InterfaceInfo#&interface-info-name)
                   (%#define-runtime
                    &interface-info-namespace
                    gerbil/core/contract~InterfaceInfo#&interface-info-namespace)
                   (%#define-runtime
                    &interface-info-interface-mixin
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-mixin)
                   (%#define-runtime
                    &interface-info-interface-methods
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-methods)
                   (%#define-runtime
                    &interface-info-interface-precedence-list
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-precedence-list)
                   (%#define-runtime
                    &interface-info-interface-descriptor
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-descriptor)
                   (%#define-runtime
                    &interface-info-instance-type
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-type)
                   (%#define-runtime
                    &interface-info-instance-constructor
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-constructor)
                   (%#define-runtime
                    &interface-info-instance-try-constructor
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-try-constructor)
                   (%#define-runtime
                    &interface-info-instance-predicate
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-predicate)
                   (%#define-runtime
                    &interface-info-instance-satisfies-predicate
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-satisfies-predicate)
                   (%#define-runtime
                    &interface-info-implementation-methods
                    gerbil/core/contract~InterfaceInfo#&interface-info-implementation-methods)
                   (%#define-runtime
                    &interface-info-unchecked-implementation-methods
                    gerbil/core/contract~InterfaceInfo#&interface-info-unchecked-implementation-methods)
                   (%#define-runtime
                    &interface-info-name-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-name-set!)
                   (%#define-runtime
                    &interface-info-namespace-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-namespace-set!)
                   (%#define-runtime
                    &interface-info-interface-mixin-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-mixin-set!)
                   (%#define-runtime
                    &interface-info-interface-methods-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-methods-set!)
                   (%#define-runtime
                    &interface-info-interface-precedence-list-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-precedence-list-set!)
                   (%#define-runtime
                    &interface-info-interface-descriptor-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-interface-descriptor-set!)
                   (%#define-runtime
                    &interface-info-instance-type-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-type-set!)
                   (%#define-runtime
                    &interface-info-instance-constructor-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-constructor-set!)
                   (%#define-runtime
                    &interface-info-instance-try-constructor-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-try-constructor-set!)
                   (%#define-runtime
                    &interface-info-instance-predicate-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-predicate-set!)
                   (%#define-runtime
                    &interface-info-instance-satisfies-predicate-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-instance-satisfies-predicate-set!)
                   (%#define-runtime
                    &interface-info-implementation-methods-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-implementation-methods-set!)
                   (%#define-runtime
                    &interface-info-unchecked-implementation-methods-set!
                    gerbil/core/contract~InterfaceInfo#&interface-info-unchecked-implementation-methods-set!)
                   (%#begin (%#begin-syntax
                             (%#call (%#ref load-module)
                                     (%#quote "gerbil/core/contract~1")))
                            (%#define-syntax
                             interface-info
                             |gerbil/core/contract~InterfaceInfo[:0:]#interface-info|))
                   (%#define-runtime
                    interface-info::apply-macro-expander
                    gerbil/core/contract~InterfaceInfo#interface-info::apply-macro-expander)
                   (%#define-runtime
                    interface-identifier->precedence-list
                    gerbil/core/contract~InterfaceInfo#interface-identifier->precedence-list)
                   (%#define-runtime
                    interface-mixin->precedence-list
                    gerbil/core/contract~InterfaceInfo#interface-mixin->precedence-list)
                   (%#define-runtime
                    interface-info-method-signature
                    gerbil/core/contract~InterfaceInfo#interface-info-method-signature)
                   (%#begin (%#define-runtime
                             syntax-local-interface-info?__%
                             gerbil/core/contract~InterfaceInfo#syntax-local-interface-info?__%)
                            (%#begin (%#define-runtime
                                      syntax-local-interface-info?__0
                                      gerbil/core/contract~InterfaceInfo#syntax-local-interface-info?__0)
                                     (%#define-runtime
                                      syntax-local-interface-info?
                                      gerbil/core/contract~InterfaceInfo#syntax-local-interface-info?))))
          (%#call (%#ref load-module)
                  (%#quote "gerbil/core/contract~InterfaceInfo~0")))
         (%#module
          TypeReference
          (%#begin (%#import (phi: 1 (in: #f InterfaceInfo)))
                   (%#export #t (phi: 1 #t))
                   (%#begin-syntax
                    (%#call (%#ref load-module)
                            (%#quote "gerbil/core/contract~2"))
                    (%#define-runtime
                     type-reference::t
                     |gerbil/core/contract~TypeReference[1]#type-reference::t|)
                    (%#define-runtime
                     type-reference?
                     |gerbil/core/contract~TypeReference[1]#type-reference?|)
                    (%#define-runtime
                     make-type-reference
                     |gerbil/core/contract~TypeReference[1]#make-type-reference|)
                    (%#define-runtime
                     type-reference-identifier
                     |gerbil/core/contract~TypeReference[1]#type-reference-identifier|)
                    (%#define-runtime
                     type-reference-identifier-set!
                     |gerbil/core/contract~TypeReference[1]#type-reference-identifier-set!|)
                    (%#define-runtime
                     &type-reference-identifier
                     |gerbil/core/contract~TypeReference[1]#&type-reference-identifier|)
                    (%#define-runtime
                     &type-reference-identifier-set!
                     |gerbil/core/contract~TypeReference[1]#&type-reference-identifier-set!|)
                    (%#begin (%#begin-syntax
                              (%#call (%#ref load-module)
                                      (%#quote "gerbil/core/contract~3")))
                             (%#define-syntax
                              type-reference
                              |gerbil/core/contract~TypeReference[:1:]#type-reference|))
                    (%#define-runtime
                     type-identifier?
                     |gerbil/core/contract~TypeReference[1]#type-identifier?|)
                    (%#define-runtime
                     resolve-type
                     |gerbil/core/contract~TypeReference[1]#resolve-type|)
                    (%#define-runtime
                     resolve-type->identifier
                     |gerbil/core/contract~TypeReference[1]#resolve-type->identifier|)
                    (%#define-runtime
                     resolve-type->type-descriptor
                     |gerbil/core/contract~TypeReference[1]#resolve-type->type-descriptor|))
                   (%#define-syntax
                    deftype
                    |gerbil/core/contract~TypeReference[:0:]#deftype|)))
         (%#module
          TypeCast
          (%#begin (%#import
                    (in: #f TypeReference)
                    (phi: 1 (in: #f InterfaceInfo)))
                   (%#export #t)
                   (%#begin (%#begin-syntax
                             (%#call (%#ref load-module)
                                     (%#quote "gerbil/core/contract~4")))
                            (%#define-syntax
                             :
                             |gerbil/core/contract~TypeCast[:0:]#:|))
                   (%#define-syntax :? |gerbil/core/contract~TypeCast[:0:]#:?|)
                   (%#define-syntax :- |gerbil/core/contract~TypeCast[:0:]#:-|)
                   (%#define-syntax :~ |gerbil/core/contract~TypeCast[:0:]#:~|)
                   (%#define-syntax
                    ::-
                    |gerbil/core/contract~TypeCast[:0:]#::-|)
                   (%#define-syntax := |gerbil/core/contract~TypeCast[:0:]#:=|)
                   (%#define-syntax
                    check-nil!
                    |gerbil/core/contract~TypeCast[:0:]#check-nil!|)
                   (%#define-syntax
                    contract-violation!
                    |gerbil/core/contract~TypeCast[:0:]#contract-violation!|)
                   (%#define-syntax
                    nil-dereference!
                    |gerbil/core/contract~TypeCast[:0:]#nil-dereference!|)
                   (%#define-syntax
                    abort!
                    |gerbil/core/contract~TypeCast[:0:]#abort!|)))
         (%#module
          TypeEnv
          (%#begin (%#import :gerbil/core/expander)
                   (%#export #t)
                   (%#define-runtime
                    type-env::t
                    gerbil/core/contract~TypeEnv#type-env::t)
                   (%#define-runtime
                    type-env?
                    gerbil/core/contract~TypeEnv#type-env?)
                   (%#define-runtime
                    make-type-env
                    gerbil/core/contract~TypeEnv#make-type-env)
                   (%#define-runtime
                    type-env-var
                    gerbil/core/contract~TypeEnv#type-env-var)
                   (%#define-runtime
                    type-env-type
                    gerbil/core/contract~TypeEnv#type-env-type)
                   (%#define-runtime
                    type-env-checked?
                    gerbil/core/contract~TypeEnv#type-env-checked?)
                   (%#define-runtime
                    type-env-super
                    gerbil/core/contract~TypeEnv#type-env-super)
                   (%#define-runtime
                    type-env-var-set!
                    gerbil/core/contract~TypeEnv#type-env-var-set!)
                   (%#define-runtime
                    type-env-type-set!
                    gerbil/core/contract~TypeEnv#type-env-type-set!)
                   (%#define-runtime
                    type-env-checked?-set!
                    gerbil/core/contract~TypeEnv#type-env-checked?-set!)
                   (%#define-runtime
                    type-env-super-set!
                    gerbil/core/contract~TypeEnv#type-env-super-set!)
                   (%#define-runtime
                    &type-env-var
                    gerbil/core/contract~TypeEnv#&type-env-var)
                   (%#define-runtime
                    &type-env-type
                    gerbil/core/contract~TypeEnv#&type-env-type)
                   (%#define-runtime
                    &type-env-checked?
                    gerbil/core/contract~TypeEnv#&type-env-checked?)
                   (%#define-runtime
                    &type-env-super
                    gerbil/core/contract~TypeEnv#&type-env-super)
                   (%#define-runtime
                    &type-env-var-set!
                    gerbil/core/contract~TypeEnv#&type-env-var-set!)
                   (%#define-runtime
                    &type-env-type-set!
                    gerbil/core/contract~TypeEnv#&type-env-type-set!)
                   (%#define-runtime
                    &type-env-checked?-set!
                    gerbil/core/contract~TypeEnv#&type-env-checked?-set!)
                   (%#define-runtime
                    &type-env-super-set!
                    gerbil/core/contract~TypeEnv#&type-env-super-set!)
                   (%#begin (%#begin-syntax
                             (%#call (%#ref load-module)
                                     (%#quote "gerbil/core/contract~5")))
                            (%#define-syntax
                             type-env
                             |gerbil/core/contract~TypeEnv[:0:]#type-env|))
                   (%#define-runtime
                    current-type-env
                    gerbil/core/contract~TypeEnv#current-type-env)
                   (%#define-runtime
                    type-env-lookup
                    gerbil/core/contract~TypeEnv#type-env-lookup))
          (%#call (%#ref load-module)
                  (%#quote "gerbil/core/contract~TypeEnv~0")))
         (%#module
          Using
          (%#begin (%#import
                    (in: #f TypeCast)
                    (in: #f TypeReference)
                    (phi: 1 (in: #f InterfaceInfo))
                    (phi: 1 (in: #f TypeEnv)))
                   (%#export #t (phi: 1 #t))
                   (%#begin (%#begin-syntax
                             (%#call (%#ref load-module)
                                     (%#quote "gerbil/core/contract~6")))
                            (%#define-syntax
                             using
                             |gerbil/core/contract~Using[:0:]#using|))
                   (%#define-syntax
                    with-contract
                    |gerbil/core/contract~Using[:0:]#with-contract|)
                   (%#begin-syntax
                    (%#define-runtime
                     !class-slot-type
                     |gerbil/core/contract~Using[1]#!class-slot-type|)
                    (%#define-runtime
                     !class-slot-default
                     |gerbil/core/contract~Using[1]#!class-slot-default|)
                    (%#define-runtime
                     !class-slot-contract
                     |gerbil/core/contract~Using[1]#!class-slot-contract|)
                    (%#define-runtime
                     !class-slot-checked-method-contract?
                     |gerbil/core/contract~Using[1]#!class-slot-checked-method-contract?|)
                    (%#define-runtime
                     !class-slot-checked-mutator-contract?
                     |gerbil/core/contract~Using[1]#!class-slot-checked-mutator-contract?|)
                    (%#define-runtime
                     dotted-identifier?
                     |gerbil/core/contract~Using[1]#dotted-identifier?|)
                    (%#define-runtime
                     split-dotted-identifier
                     |gerbil/core/contract~Using[1]#split-dotted-identifier|)
                    (%#define-runtime
                     get-slot-accessor
                     |gerbil/core/contract~Using[1]#get-slot-accessor|)
                    (%#define-runtime
                     get-slot-mutator
                     |gerbil/core/contract~Using[1]#get-slot-mutator|))
                   (%#define-syntax
                    with-class
                    |gerbil/core/contract~Using[:0:]#with-class|)
                   (%#define-syntax
                    with-interface
                    |gerbil/core/contract~Using[:0:]#with-interface|)
                   (%#define-syntax
                    %%app-dotted
                    |gerbil/core/contract~Using[:0:]#%%app-dotted|)
                   (%#define-syntax
                    %%ref-dotted
                    |gerbil/core/contract~Using[:0:]#%%ref-dotted|)
                   (%#define-syntax
                    %%set-dotted!
                    |gerbil/core/contract~Using[:0:]#%%set-dotted!|)))
         (%#module
          ContractRules
          (%#begin (%#export #t)
                   (%#begin (%#begin-syntax
                             (%#call (%#ref load-module)
                                     (%#quote "gerbil/core/contract~7")))
                            (%#define-syntax
                             maybe
                             |gerbil/core/contract~ContractRules[:0:]#maybe|))
                   (%#define-syntax
                    in-range?
                    |gerbil/core/contract~ContractRules[:0:]#in-range?|)
                   (%#define-syntax
                    in-range-inclusive?
                    |gerbil/core/contract~ContractRules[:0:]#in-range-inclusive?|)
                   (%#define-syntax
                    list-of?
                    |gerbil/core/contract~ContractRules[:0:]#list-of?|)))
         (%#module
          ClassMeta
          (%#begin (%#export #t)
                   (%#import
                    :gerbil/core/expander
                    (in: :gerbil/core/mop MOP-2)
                    (phi: -1 (in: #f TypeCast)))
                   (%#define-runtime
                    !class-precedence-list
                    gerbil/core/contract~ClassMeta#!class-precedence-list))
          (%#call (%#ref load-module)
                  (%#quote "gerbil/core/contract~ClassMeta~0")))
         (%#module
          Interface
          (%#begin (%#import
                    (in: #f TypeCast)
                    (in: #f TypeReference)
                    (in: #f Using)
                    (phi: 1 (in: #f InterfaceInfo))
                    (phi: 1 (in: #f TypeEnv))
                    (phi: 1 (in: #f ClassMeta)))
                   (%#export #t (phi: 1 #t))
                   (%#begin-syntax
                    (%#call (%#ref load-module)
                            (%#quote "gerbil/core/contract~8"))
                    (%#begin (%#define-runtime
                              check-signature!__%
                              |gerbil/core/contract~Interface[1]#check-signature!__%|)
                             (%#define-runtime
                              check-signature!__@
                              |gerbil/core/contract~Interface[1]#check-signature!__@|)
                             (%#define-runtime
                              check-signature!
                              |gerbil/core/contract~Interface[1]#check-signature!|))
                    (%#define-runtime
                     check-valid-type!
                     |gerbil/core/contract~Interface[1]#check-valid-type!|)
                    (%#begin (%#define-runtime
                              check-signature-spec!__%
                              |gerbil/core/contract~Interface[1]#check-signature-spec!__%|)
                             (%#define-runtime
                              check-signature-spec!__@
                              |gerbil/core/contract~Interface[1]#check-signature-spec!__@|)
                             (%#define-runtime
                              check-signature-spec!
                              |gerbil/core/contract~Interface[1]#check-signature-spec!|))
                    (%#define-runtime
                     signature-contract?
                     |gerbil/core/contract~Interface[1]#signature-contract?|)
                    (%#define-runtime
                     check-signature-contract-types!
                     |gerbil/core/contract~Interface[1]#check-signature-contract-types!|)
                    (%#define-runtime
                     signature-arguments-in
                     |gerbil/core/contract~Interface[1]#signature-arguments-in|)
                    (%#define-runtime
                     signature-arguments-out
                     |gerbil/core/contract~Interface[1]#signature-arguments-out|)
                    (%#define-runtime
                     signature-has-keywords?
                     |gerbil/core/contract~Interface[1]#signature-has-keywords?|)
                    (%#define-runtime
                     make-interface-method-lambda-signature
                     |gerbil/core/contract~Interface[1]#make-interface-method-lambda-signature|)
                    (%#define-runtime
                     make-interface-method-contract
                     |gerbil/core/contract~Interface[1]#make-interface-method-contract|)
                    (%#define-runtime
                     make-procedure-lambda-signature
                     |gerbil/core/contract~Interface[1]#make-procedure-lambda-signature|)
                    (%#define-runtime
                     make-procedure-contract
                     |gerbil/core/contract~Interface[1]#make-procedure-contract|)
                    (%#define-runtime
                     compatible-signatures?
                     |gerbil/core/contract~Interface[1]#compatible-signatures?|)
                    (%#define-runtime
                     compatible-signature-type-contract?
                     |gerbil/core/contract~Interface[1]#compatible-signature-type-contract?|)
                    (%#define-runtime
                     compatible-type-contract?
                     |gerbil/core/contract~Interface[1]#compatible-type-contract?|)
                    (%#define-runtime
                     contract-type-subtype?
                     |gerbil/core/contract~Interface[1]#contract-type-subtype?|)
                    (%#define-runtime
                     signature-type-contract
                     |gerbil/core/contract~Interface[1]#signature-type-contract|)
                    (%#define-runtime
                     signature-arity
                     |gerbil/core/contract~Interface[1]#signature-arity|)
                    (%#define-runtime
                     signature-keywords
                     |gerbil/core/contract~Interface[1]#signature-keywords|)
                    (%#define-runtime
                     symbol<?
                     |gerbil/core/contract~Interface[1]#symbol<?|)
                    (%#define-runtime
                     keyword<?
                     |gerbil/core/contract~Interface[1]#keyword<?|))
                   (%#define-syntax
                    interface
                    |gerbil/core/contract~Interface[:0:]#interface|)
                   (%#define-syntax
                    definterface-method
                    |gerbil/core/contract~Interface[:0:]#definterface-method|)
                   (%#define-syntax
                    with-interface-method
                    |gerbil/core/contract~Interface[:0:]#with-interface-method|)
                   (%#define-syntax
                    with-interface-checked-method
                    |gerbil/core/contract~Interface[:0:]#with-interface-checked-method|)
                   (%#define-syntax
                    with-interface-unchecked-method
                    |gerbil/core/contract~Interface[:0:]#with-interface-unchecked-method|)
                   (%#define-syntax
                    interface-out
                    |gerbil/core/contract~Interface[:0:]#interface-out|)))
         (%#module
          TypedDefinitions
          (%#begin (%#import
                    (in: #f TypeCast)
                    (in: #f Using)
                    (in: #f ContractRules)
                    (in: #f TypeReference)
                    (in: #f Interface)
                    (phi: 1 (in: #f InterfaceInfo))
                    (phi: 1 (in: #f TypeEnv))
                    (phi: 1 (in: #f ClassMeta))
                    (spec:
                     (:gerbil/core/mop)
                     (1 @method~ 1 @method)
                     (0 @method~ 0 @method)))
                   (%#export #t (phi: 1 #t))
                   (%#begin-syntax
                    (%#call (%#ref load-module)
                            (%#quote "gerbil/core/contract~9"))
                    (%#define-runtime
                     is-signature?
                     |gerbil/core/contract~TypedDefinitions[1]#is-signature?|))
                   (%#define-syntax
                    def/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#def/c|)
                   (%#define-syntax
                    with-procedure-signature
                    |gerbil/core/contract~TypedDefinitions[:0:]#with-procedure-signature|)
                   (%#define-syntax
                    with-procedure-contract
                    |gerbil/core/contract~TypedDefinitions[:0:]#with-procedure-contract|)
                   (%#define-syntax
                    with-procedure-unchecked-contract
                    |gerbil/core/contract~TypedDefinitions[:0:]#with-procedure-unchecked-contract|)
                   (%#define-syntax
                    lambda/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#lambda/c|)
                   (%#define-syntax
                    def*/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#def*/c|)
                   (%#define-syntax
                    case-lambda/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#case-lambda/c|)
                   (%#define-syntax
                    @method
                    |gerbil/core/contract~TypedDefinitions[:0:]#@method|)
                   (%#define-syntax
                    defmethod/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#defmethod/c|)
                   (%#define-syntax
                    with-receiver
                    |gerbil/core/contract~TypedDefinitions[:0:]#with-receiver|)
                   (%#define-syntax
                    let/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#let/c|)
                   (%#define-syntax
                    defclass/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#defclass/c|)
                   (%#define-syntax
                    defstruct/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#defstruct/c|)
                   (%#define-syntax
                    do/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#do/c|)
                   (%#define-syntax
                    do-loop-result
                    |gerbil/core/contract~TypedDefinitions[:0:]#do-loop-result|)
                   (%#define-syntax
                    do-loop-step
                    |gerbil/core/contract~TypedDefinitions[:0:]#do-loop-step|)
                   (%#define-syntax
                    do-while/c
                    |gerbil/core/contract~TypedDefinitions[:0:]#do-while/c|)
                   (%#define-syntax
                    defmutable*
                    |gerbil/core/contract~TypedDefinitions[:0:]#defmutable*|)
                   (%#define-syntax
                    defmutable
                    |gerbil/core/contract~TypedDefinitions[:0:]#defmutable|)))
         (%#import
          (in: #f TypeReference)
          (in: #f TypeCast)
          (in: #f Using)
          (in: #f ContractRules)
          (in: #f Interface)
          (in: #f TypedDefinitions)
          (phi: 1 (in: #f InterfaceInfo))
          (phi: 1 (in: #f TypeEnv))
          (phi: 1 (in: #f ClassMeta))))
